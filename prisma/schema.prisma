generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum FormRoonType {
  PUBLIC
  PRIVATE
}

enum SubmissionStatus {
  DRAFT
  COMPLETED
}

enum NotificationType {
  SUBMISSION
  FORM_EDIT
  FORM_UPDATE
  RESPONSE_EDIT
}


model User {
  id                String       @id  
  email             String       @unique
  name              String
  username          String       @unique
  submittedResponses Response[]    
  notifications     Notification[] // Relation to the Notification model
}

model Notification {
  id        String   @id @default(uuid()) // UUID for notification ID
  userId    String   // Foreign key to User
  formId    Int      // ID of the form related to the notification
  content   String   // Content of the notification
  type      NotificationType // Type of notification using the enum
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  
  user      User     @relation(fields: [userId], references: [id]) // Relation to User
  form      Form     @relation(fields: [formId], references: [id]) // Relation to Form
}

model Response { // monitors the form you have submitted 
  id        Int      @id @default(autoincrement())
  userId    String   
  formId    Int      // ID of the form the user responded to
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id]) // Relation to User
  form      Form     @relation(fields: [formId], references: [id]) // Relation to Form
}

model Form {
  id                      Int              @id @default(autoincrement())
  userId                  String
  createdBy              String
  createdAt              DateTime         @default(now())
  published              Boolean          @default(false)
  isEditing              Boolean          @default(false)
  isDeactivated          Boolean          @default(false)
  isArchived             Boolean          @default(false)
  isFavorite             Boolean          @default(false)
  name                   String
  description            String           @default("")
  content                String           @default("[]")
  roomType               FormRoonType     @default(PUBLIC)
  roomCode               String?
  roomCodeSalt           String?
  visits                 Int              @default(0)
  submissions            Int              @default(0)
  maxSubmissions         Int              @default(0)
  shareURL               String           @unique @default(uuid())
  FormSubmissions        FormSubmissions[]
  responses              Response[]         
  notifications          Notification[]         
  allowMultipleSubmissions Boolean         @default(false)
  expiresAt              DateTime?
  lastUpdatedAt          DateTime         @updatedAt
  activities             Activity[]
  metrics                FormMetrics?

  @@unique([name, userId])
}

model FormSubmissions {
  id            Int      @id @default(autoincrement())
  email         String
  createdAt     DateTime @default(now())
  lastUpdatedAt DateTime @updatedAt
  isAnonymous   Boolean  
  isEditing     Boolean          @default(false)
  status        SubmissionStatus @default(DRAFT)
  formId        Int
  form          Form     @relation(fields: [formId], references: [id])
  content       String
  feedback      String   @default("")
}

// have a your responses tab and conditionally show based of the ones that are submitted (COMPLETED) and the ones that aren't DRAFT

model Activity {
  id        String   @id @default(cuid())
  type      String   // 'submission' | 'comment' | 'visit'
  formId    Int      // Changed from String to Int to match Form.id
  form      Form     @relation(fields: [formId], references: [id])
  userId    String?
  userName  String?
  createdAt DateTime @default(now())
}

model FormMetrics {
  id            String @id @default(cuid())
  formId        Int    @unique // Changed from String to Int to match Form.id
  form          Form   @relation(fields: [formId], references: [id])
  avgResponseTime Float
  completionRate Float
  bounceRate     Float
  updatedAt      DateTime @default(now())
}